/**
 * AI Generated: This file is generated by Claude
 */

import express from "express";
import helmet from "helmet";
import cors from "cors";
import { createLogger } from "./utils/logger.js";
import { RateLimiter } from "./middleware/rateLimiter.js";
import { RedisStorage } from "./storage/RedisStorage.js";
import { InMemoryStorage } from "./storage/InMemoryStorage.js";

// Load environment variables
import dotenv from "dotenv";
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3334;
const logger = createLogger();

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Choose storage based on environment
const storage = process.env.REDIS_HOST
  ? new RedisStorage()
  : new InMemoryStorage();

// Create rate limiters with different strategies
const rateLimiters = {
  // API rate limiter - 100 requests per minute
  api: new RateLimiter({
    storage,
    algorithm: "sliding-window",
    tokens: 100,
    window: "1m",
    keyGenerator: (req) => req.ip,
  }),

  // auth: new RateLimiter({
  //   storage,
  //   algorithm: "fixed-window",
  //   tokens: 5,
  //   window: "15m",
  //   keyGenerator: (req) => `auth:${req.ip}`,
  // }),

  // upload: new RateLimiter({
  //   storage,
  //   algorithm: "token-bucket",
  //   refillRate: 1,
  //   interval: "1m",
  //   maxTokens: 10,
  //   keyGenerator: (req) => `upload:${req.ip}`,
  // }),

  // search: new RateLimiter({
  //   storage,
  //   algorithm: "sliding-log",
  //   tokens: 30,
  //   window: "1m",
  //   keyGenerator: (req) => `search:${req.user?.id || req.ip}`,
  // }),
};

// API endpoints with rate limiting
app.get("/api/data", rateLimiters.api.middleware(), (req, res) => {
  res.json({
    message: "API request successful",
    timestamp: new Date().toISOString(),
    rateLimit: {
      limit: res.locals.rateLimit.limit,
      remaining: res.locals.rateLimit.remaining,
      reset: new Date(res.locals.rateLimit.reset).toISOString(),
    },
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  logger.error("Unhandled error:", err);
  res.status(500).json({ error: "Internal server error" });
});

// Start server
async function startServer() {
  try {
    await storage.connect();
    logger.info("Storage connected");

    app.listen(PORT, () => {
      logger.info(`Server running on port ${PORT}`);
      logger.info(`Storage type: ${storage.constructor.name}`);
    });
  } catch (error) {
    logger.error("Failed to start server:", error);
    process.exit(1);
  }
}

startServer();

// Graceful shutdown
process.on("SIGTERM", async () => {
  logger.info("SIGTERM received, shutting down gracefully");
  await storage.disconnect();
  process.exit(0);
});
