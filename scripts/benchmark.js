/**
 * AI Generated: This file is generated by Claude
 */

import { RateLimiter } from "../src/middleware/rateLimiter.js";
import { InMemoryStorage } from "../src/storage/InMemoryStorage.js";
import { RedisStorage } from "../src/storage/RedisStorage.js";

async function benchmark(storage, algorithm, iterations = 10000) {
  const limiter = new RateLimiter({
    storage,
    algorithm,
    tokens: 100,
    window: "1m",
    refillRate: 10,
    interval: "1s",
    maxTokens: 100,
  });

  console.log(`\nBenchmarking ${algorithm} with ${storage.constructor.name}`);
  console.log(`Iterations: ${iterations}`);

  const startTime = process.hrtime.bigint();
  const results = [];

  for (let i = 0; i < iterations; i++) {
    const req = { ip: `user-${i % 100}` }; // Simulate 100 different users
    const result = await limiter.limit(req);
    results.push(result);
  }

  const endTime = process.hrtime.bigint();
  const duration = Number(endTime - startTime) / 1e6; // Convert to milliseconds

  const successful = results.filter((r) => r.success).length;
  const blocked = results.filter((r) => !r.success).length;

  console.log(`Duration: ${duration.toFixed(2)}ms`);
  console.log(`Ops/sec: ${(iterations / (duration / 1000)).toFixed(2)}`);
  console.log(`Avg latency: ${(duration / iterations).toFixed(3)}ms`);
  console.log(`Successful: ${successful}, Blocked: ${blocked}`);

  return {
    algorithm,
    storage: storage.constructor.name,
    iterations,
    duration,
    opsPerSecond: iterations / (duration / 1000),
    avgLatency: duration / iterations,
    successful,
    blocked,
  };
}

async function runBenchmarks() {
  const algorithms = [
    "fixed-window",
    "sliding-window",
    "token-bucket",
    "sliding-log",
  ];

  const results = [];

  // Benchmark with in-memory storage
  console.log("\n=== In-Memory Storage Benchmarks ===");
  const memStorage = new InMemoryStorage();

  for (const algo of algorithms) {
    const result = await benchmark(memStorage, algo);
    results.push(result);
  }

  // Benchmark with Redis if available
  try {
    console.log("\n=== Redis Storage Benchmarks ===");
    const redisStorage = new RedisStorage();
    await redisStorage.connect();

    for (const algo of algorithms) {
      const result = await benchmark(redisStorage, algo, 1000); // Fewer iterations for Redis
      results.push(result);
    }

    await redisStorage.disconnect();
  } catch (error) {
    console.log("Redis not available, skipping Redis benchmarks");
  }

  // Summary
  console.log("\n=== Benchmark Summary ===");
  console.table(results);
}

// ES module equivalent of require.main === module
if (import.meta.url === `file://${process.argv[1]}`) {
  runBenchmarks().catch(console.error);
}
