/**
 * AI Generated: This file is generated by Claude
 */
import { RateLimiter } from "../src/middleware/rateLimiter.js";
import { InMemoryStorage } from "../src/storage/InMemoryStorage.js";

describe("Rate Limiter Tests", () => {
  let storage;

  beforeEach(() => {
    storage = new InMemoryStorage();
  });

  afterEach(() => {
    storage.clear();
  });

  describe("Fixed Window", () => {
    test("should allow requests within limit", async () => {
      const limiter = new RateLimiter({
        storage,
        algorithm: "fixed-window",
        tokens: 3,
        window: "1m",
      });

      const req = { ip: "127.0.0.1" };

      const result1 = await limiter.limit(req);
      expect(result1.success).toBe(true);
      expect(result1.remaining).toBe(2);

      const result2 = await limiter.limit(req);
      expect(result2.success).toBe(true);
      expect(result2.remaining).toBe(1);

      const result3 = await limiter.limit(req);
      expect(result3.success).toBe(true);
      expect(result3.remaining).toBe(0);
    });

    test("should block requests over limit", async () => {
      const limiter = new RateLimiter({
        storage,
        algorithm: "fixed-window",
        tokens: 2,
        window: "1m",
      });

      const req = { ip: "127.0.0.1" };

      await limiter.limit(req);
      await limiter.limit(req);

      const result = await limiter.limit(req);
      expect(result.success).toBe(false);
      expect(result.remaining).toBe(0);
      expect(result.retryAfter).toBeGreaterThan(0);
    });
  });

  describe("Token Bucket", () => {
    test("should refill tokens over time", async () => {
      const limiter = new RateLimiter({
        storage,
        algorithm: "token-bucket",
        refillRate: 1,
        interval: "1s",
        maxTokens: 2,
      });

      const req = { ip: "127.0.0.1" };

      // Use 2 tokens
      await limiter.limit(req);
      await limiter.limit(req);

      // Should be blocked
      let result = await limiter.limit(req);
      expect(result.success).toBe(false);

      // Wait for refill
      await new Promise((resolve) => setTimeout(resolve, 1100));

      // Should have 1 token now
      result = await limiter.limit(req);
      expect(result.success).toBe(true);
    });
  });
});
