/**
 * AI Generated: This file is generated by Claude
 */
const axios = require('axios');

async function loadTest(endpoint, requests, concurrency) {
  const baseURL = 'http://localhost:3000';
  const results = {
    successful: 0,
    rateLimited: 0,
    errors: 0,
    timings: []
  };

  console.log(`\nLoad testing ${endpoint} with ${requests} requests...`);
  console.log(`Concurrency: ${concurrency}`);

  const startTime = Date.now();

  // Create batches
  const batches = [];
  for (let i = 0; i < requests; i += concurrency) {
    const batch = [];
    for (let j = 0; j < concurrency && i + j < requests; j++) {
      batch.push(
        axios.get(`${baseURL}${endpoint}`)
          .then(response => {
            results.successful++;
            const remaining = response.headers['x-ratelimit-remaining'];
            console.log(`✓ Request ${i + j + 1}: Success (Remaining: ${remaining})`);
          })
          .catch(error => {
            if (error.response?.status === 429) {
              results.rateLimited++;
              const retryAfter = error.response.headers['retry-after'];
              console.log(`⚠ Request ${i + j + 1}: Rate limited (Retry after: ${retryAfter}s)`);
            } else {
              results.errors++;
              console.log(`✗ Request ${i + j + 1}: Error - ${error.message}`);
            }
          })
      );
    }

    // Execute batch
    await Promise.all(batch);

    // Small delay between batches
    if (i + concurrency < requests) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  const duration = Date.now() - startTime;

  console.log('\n--- Results ---');
  console.log(`Total requests: ${requests}`);
  console.log(`Successful: ${results.successful}`);
  console.log(`Rate limited: ${results.rateLimited}`);
  console.log(`Errors: ${results.errors}`);
  console.log(`Duration: ${duration}ms`);
  console.log(`Requests/sec: ${(requests / (duration / 1000)).toFixed(2)}`);

  return results;
}

// Run different test scenarios
async function runTests() {
  console.log('Starting load tests...\n');

  // Test 1: Normal load
  console.log('Test 1: Normal Load (50 requests, concurrency 5)');
  await loadTest('/api/data', 50, 5);

  // Wait for rate limit window to reset
  await new Promise(resolve => setTimeout(resolve, 60000));

  // Test 2: Heavy load
  console.log('\nTest 2: Heavy Load (200 requests, concurrency 20)');
  await loadTest('/api/data', 200, 20);

  // Test 3: Auth endpoint
  console.log('\nTest 3: Auth Endpoint (10 requests, concurrency 2)');
  await loadTest('/auth/login', 10, 2);
}

// Run if executed directly
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { loadTest };
